//
//  MarcatoreViewController.swift
//  Planet365UIKit
//
//  Created by Vladimir Lukic on 21.10.21..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI

protocol MarcatoreDisplayLogic: AnyObject
{
    func displayAPI(viewModel: Marcatore.API.ViewModel)
    func displayErrorAPI(viewModel: Marcatore.API.EmptyViewModel)
}

class MarcatoreViewController: BaseViewController, MarcatoreDisplayLogic
{
    
    var interactor: MarcatoreBusinessLogic?
    var router: (NSObjectProtocol & MarcatoreRoutingLogic & MarcatoreDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MarcatoreInteractor()
        let presenter = MarcatorePresenter()
        let router = MarcatoreRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - Outlets
    // MARK:
    
    @IBOutlet weak var tblTable: UITableView!
    
    // MARK: - Properties
    // MARK:
    
    var apiModel: [MoccupAPIModel]!
    var expanded: [Bool]!
    var expandedGames: [[Bool]]!
    
    var formatter = DateFormatter()
    var formatterString = DateFormatter()
    var formatterStringTime = DateFormatter()
    
    // Isto uradjeno na brzaka kako bi se prikazao proces selekcije zeljene kvote
    var selectedGameOnIndexPath: (IndexPath, Int) = (IndexPath(row: -1, section: -1), -1)
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        // Configure view
        configureView()
        
        // Configure date formatter for later use
        formatter.dateFormat = "dd-MM-yyyy HH:mm:ss"
        formatter.locale = Locale(identifier: "it_IT")
        formatter.timeZone = TimeZone(identifier: "UCT")
        formatterString.dateFormat = "EEEE dd MMMM yyyy"
        formatterString.locale = Locale(identifier: "it_IT")
        formatterString.timeZone = TimeZone(identifier: "UCT")
        formatterStringTime.dateFormat = "HH:mm"
        formatterStringTime.locale = Locale(identifier: "it_IT")
        formatterStringTime.timeZone = TimeZone(identifier: "UCT")
        
        // Init table view and set delegate
        if self.tblTable != nil {
            self.tblTable.delegate = self
            self.tblTable.dataSource = self
            
            // Regster table cell
            registerCellsForTableView()
        }
        
        // Clear content inset
        self.tblTable.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        
        // Load API
        self.startActivityIndicator(onView: nil, color: Color.foregroundGrey)
        self.tblTable.alpha = 0.0
        interactor?.handleAPI(request: Marcatore.API.Request())
    }
    
    // MARK: Configure view
    
    func configureView() {
        
        // Set background
        self.view.backgroundColor = Color.backgroundBlack
        
        // Set title label
        // self.lblTitle.textColor = Color.foregroundWhite
    }
    
    // MARK: Expansion handled
    
    func handleAccordion(onIndexPath: IndexPath) {
        if self.expanded[onIndexPath.section] == true {
            collapseCellOnIndex(index: onIndexPath.section)
        } else {
            expandCellOnIndex(index: onIndexPath.section)
        }
    }
    
    func expandCellOnIndex(index: Int) {
        self.expanded[index] = true
        
        // Reload table view
        self.tblTable.reloadData()
    }
    
    func collapseCellOnIndex(index: Int) {
        self.expanded[index] = false
        
        // Reload table view
        self.tblTable.reloadData()
    }
    
    func handleAccordionGames(section: Int, onIndexPath: IndexPath) {
        if self.expandedGames[section][onIndexPath.section] == true {
            collapseGameCellOnIndex(section: section, index: onIndexPath.section)
        } else {
            expandGameCellOnIndex(section: section, index: onIndexPath.section)
        }
    }
    
    func expandGameCellOnIndex(section: Int, index: Int) {
        self.expandedGames[section][index] = true
        
        // Reload table view
        self.tblTable.reloadData()
    }
    
    func collapseGameCellOnIndex(section: Int, index: Int) {
        self.expandedGames[section][index] = false
        
        // Reload table view
        self.tblTable.reloadData()
    }
    
    // MARK: Display API result
    
    func displayAPI(viewModel: Marcatore.API.ViewModel) {
        
        // Clear activity indicator
        self.viewActivityIndicator.subviews.forEach({ $0.removeFromSuperview() })
        self.viewActivityIndicator.superview?.sendSubviewToBack(self.viewActivityIndicator)
        
        // Set response to value
        self.apiModel = viewModel.response
        
        // Init expand array
        self.expanded = [Bool]()
        for _ in self.apiModel {
            self.expanded.append(false)
        }
        
        // Init expand games array
        self.expandedGames = [[Bool]]()
        var games = [Bool]()
        var i = 0
        for _ in self.apiModel {
            for _ in self.apiModel[i].games ?? [GameModel]() {
                games.append(false)
            }
            expandedGames.append(games)
            i += 1
        }
        
        // Expand first cell
        if self.expanded.count >= 1 {
            expandCellOnIndex(index: 0)
        }
                
        // Expand first game cell
        if self.expandedGames.count >= 1 && self.expandedGames[0].count >= 1 {
            expandGameCellOnIndex(section: 0, index: 0)
        }
        
        // Reload table view
        UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) {
            self.tblTable.alpha = 1.0
        } completion: { completed in
            DispatchQueue.main.async {
                self.tblTable.reloadData()
            }
        }
    }
    
    func displayErrorAPI(viewModel: Marcatore.API.EmptyViewModel) {
        
        // Clear activity indicator
        self.viewActivityIndicator.subviews.forEach({ $0.removeFromSuperview() })
        self.viewActivityIndicator.superview?.sendSubviewToBack(self.viewActivityIndicator)
        
        // Show empty label
    }
}

// MARK: - Register cells
// MARK:

extension MarcatoreViewController {
    
    // Register vehicle cell
    func registerCellsForTableView() {
        let nibName = UINib(nibName: "MarcatoreGameTableViewCell", bundle:nil)
        self.tblTable.register(nibName, forCellReuseIdentifier: "MarcatoreGameTableViewCell")
    }
}

// MARK: - UITableViewDelegate
// MARK:

extension MarcatoreViewController: UITableViewDelegate {
    
    // Estimated cell height
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        
        // Napravio sam gresku u api modelu jer sam trebao strelce vezivati za igru, ovako
        // ostaje da po jednoj ligi moze da ima samo jedan mec, sto nije dobro, ali je sada kasno da
        // menjam (: pa cu malo isfejkovati ovde kako bih napravio i accordion po jednom mecu
        if expandedGames[0][0] == true { // ovo [0][0] je fejk, trebalo bi [leagueIndex][gameIndex] :D
            return CGFloat(apiModel[indexPath.section].marcatoreArray?.count ?? 0) * 96.0 + 44.0 // UITableView.automaticDimension
        } else {
            return 44.0
        }
    }
    
    // Cell height for row at index path
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if expandedGames[0][0] == true {
            return CGFloat(apiModel[indexPath.section].marcatoreArray?.count ?? 0) * 96.0 + 44.0 // UITableView.automaticDimension
        } else {
            return 44.0
        }
    }
    
    // Height for header
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 44.0 + 30.0
    }
    
    // Header view
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return MarcatoreHeaderTableView.initMarcatoreHeaderViewWith(model: self.apiModel[section], isExpanded: self.expanded[section], indexPath: IndexPath(row: 0, section: section), context: self)
    }
}

// MARK: - UITableViewDatasource
// MARK:

extension MarcatoreViewController: UITableViewDataSource {
    
    // Number of sections
    func numberOfSections(in tableView: UITableView) -> Int {
        if self.apiModel != nil && self.apiModel.count > 0 {
            return self.apiModel.count
        } else {
            return 0
        }
    }
    
    // Number of rows in section
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return expanded[section] == true ? 1 : 0
    }
    
    // Cell For Row at IndexPath
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return MarcatoreGameTableViewCell.configureCell(tableView, itemAtIndexPath: indexPath, params: ["model": self.apiModel[indexPath.row]], context: self)
    }
    
}

