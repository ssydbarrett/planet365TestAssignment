//
//  HomeSoccerViewController.swift
//  Planet365UIKit
//
//  Created by Vladimir Lukic on 19.10.21..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeSoccerDisplayLogic: AnyObject
{
    func displayInitControllers(viewModel: HomeSoccer.InitControllers.ViewModel)
    func displayControllersSwitch(viewModel: HomeSoccer.Switch.ViewModel)
}

class HomeSoccerViewController: BaseViewController, HomeSoccerDisplayLogic
{
    
    var interactor: HomeSoccerBusinessLogic?
    var router: (NSObjectProtocol & HomeSoccerRoutingLogic & HomeSoccerDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeSoccerInteractor()
        let presenter = HomeSoccerPresenter()
        let router = HomeSoccerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Outlets
    
    @IBOutlet var segmentedControl: UISegmentedControl!
    
    @IBOutlet weak var headerCollectionView: UICollectionView!
    
    @IBOutlet var viewGoLeft: UIView!
    @IBOutlet var btnGoLeft: UIButton!
    @IBOutlet var viewGoRight: UIView!
    @IBOutlet var btnGoRight: UIButton!
    
    // Main
    @IBOutlet weak var viewContent: UIView!
    
    // MARK: Properties
    
    // Header collection selected index
    var headerCollectionSelectedIndex = 0
    
    // Header collection array data source
    let headerCollectionArrayDatasource = ["1Â°\nMarcatore+1x2", "1X2", "Dopia Chance", "Over/Under 2.5", "Gol/No Gol", "Calci D'angolo", "Altro"]
    
    // List of view controllers
    var serieAMarcatoreVC: BaseViewController!
    var noDataVC: BaseViewController!
    
    // Array that contains view controllers + current
    var currentVC: BaseViewController!
    var viewControllers: [BaseViewController]!
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        // Configure view
        configureView()
        
        // Configure header collection view
        configureHeaderCollectionView()
        
        // Init controlers
        interactor?.handleInitControllers(request: HomeSoccer.InitControllers.Request())
    }
    
    // MARK: Configure view
    
    func configureView() {
        
        // Set background
        self.view.backgroundColor = Color.backgroundBlack
        
        // Set title label
        // self.lblTitle.textColor = Color.foregroundWhite - no more available - showing container instead
        
        // Configure segmented controller
        self.segmentedControl.setBackgroundImage(UIImage.imageWithColor(color: Color.backgroundBlack), for: .normal, barMetrics: .default)
        self.segmentedControl.setBackgroundImage(UIImage.imageWithColor(color: Color.backgroundYellowSelected), for: .selected, barMetrics: .default)
        self.segmentedControl.backgroundColor = Color.backgroundBlack
        self.segmentedControl.tintColor = Color.backgroundYellowSelected
        self.segmentedControl.map { control in
            control.setTitleTextAttributes([.foregroundColor: Color.foregroundGrey], for: .normal)
            control.setTitleTextAttributes([.foregroundColor: Color.foregroundBlack], for: .selected)
            
        }
        updateSegmentedControlStyle()
        
        // Configure segmented controll border
        segmentedControl.layer.borderColor = Color.foregroundGrey.cgColor
        segmentedControl.layer.borderWidth = CGFloat(2.0)
        segmentedControl.layer.cornerRadius = CGFloat(4.0)
        segmentedControl.layer.masksToBounds = true

        // Configure left and right buttons
        btnGoLeft.backgroundColor = Color.backgroundYellowSelected
        var templateImage = btnGoLeft.image(for: .normal)?.withRenderingMode(.alwaysTemplate)
        btnGoLeft.setImage(templateImage, for: .normal)
        btnGoLeft.tintColor = Color.backgroundBlack
        Utils.addBorderTo(view: btnGoLeft, cornerRadius: 8.0, borderColor: Color.backgroundBlack, borderWidth: 2.0)
        btnGoRight.backgroundColor = Color.backgroundYellowSelected
        templateImage = btnGoRight.image(for: .normal)?.withRenderingMode(.alwaysTemplate)
        btnGoRight.setImage(templateImage, for: .normal)
        btnGoRight.tintColor = Color.backgroundBlack
        Utils.addBorderTo(view: btnGoRight, cornerRadius: 8.0, borderColor: Color.backgroundBlack, borderWidth: 2.0)
        
        // Show or hide buttons initially
        showLeftRightButtons()
    }
    
    // Update segmented control backgrounds
    func updateSegmentedControlStyle () {
        let sortedViews = segmentedControl.subviews.sorted( by: { $0.frame.origin.x < $1.frame.origin.x } )
        for (index, view) in sortedViews.enumerated() {
            if index == segmentedControl.selectedSegmentIndex {
                view.tintColor = Color.backgroundYellowSelected
            } else {
                view.tintColor = Color.backgroundBlack
            }
            view.layer.cornerRadius = 8.0
            view.layer.masksToBounds = true
        }
    }
    
    // Configure header collection view
    func configureHeaderCollectionView() {
        
        // Configure slider collection view
        headerCollectionView.delegate = self
        headerCollectionView.dataSource = self
        
        // Register cells for slider collection view
        self.registerCellsForCollectionView()
    }
    
    // Handle showing of left and right header buttons
    func showLeftRightButtons() {
        
        // Hide left button
        if headerCollectionView.contentOffset.x <= 0 {
            UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) {
                self.viewGoLeft.alpha = 0.0
                self.viewGoRight.alpha = 1.0
            } completion: { completed in }
        }
        
        // Hide right button
        else if headerCollectionView.contentOffset.x >= headerCollectionView.contentSize.width - headerCollectionView.frame.size.width { // cell size
            UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) {
                self.viewGoLeft.alpha = 1.0
                self.viewGoRight.alpha = 0.0
            } completion: { completed in }
        }
        
        // Show both buttons
        else {
            UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) {
                self.viewGoLeft.alpha = 1.0
                self.viewGoRight.alpha = 1.0
            } completion: { completed in }
        }
    }
    
    // MARK: Handle segmented controller
    
    @IBAction func indexChanged(_ sender: UISegmentedControl) {
        switch segmentedControl.selectedSegmentIndex {
        case 0:
            print("1 ore")
        case 1:
            print("3 ori")
        case 2:
            print("Oggie")
        case 3:
            print("3 giorni")
        case 4:
            print("Tutti")
        default:
            break;
        }
        
        // Update style
        updateSegmentedControlStyle()
        
        // Show appropriate view controller
        interactor?.handleControllersSwitch(request: HomeSoccer.Switch.Request(indexSegmented: self.segmentedControl.selectedSegmentIndex, indexHeader: self.headerCollectionSelectedIndex))
    }
    
    // MARK: Handle header buttons
    
    @IBAction func goLeft(_ sender: UIButton) {
        var newOffset: CGFloat = headerCollectionView.contentOffset.x - 108.0
        if newOffset <= 0 {
            newOffset = 0
        }
        headerCollectionView.setContentOffset(CGPoint(x: newOffset, y: 0.0), animated: true)
    }
    
    @IBAction func goRight(_ sender: UIButton) {
        var newOffset: CGFloat = headerCollectionView.contentOffset.x + 108.0
        if newOffset >= headerCollectionView.contentSize.width - headerCollectionView.frame.size.width {
            newOffset = headerCollectionView.contentSize.width - headerCollectionView.frame.size.width
        }
        headerCollectionView.setContentOffset(CGPoint(x: newOffset, y: 0.0), animated: true)
    }
    
    // MARK: Display appropriate controllers
    
    func displayInitControllers(viewModel: HomeSoccer.InitControllers.ViewModel) {
        
        // Get storyboards
        let storyboard = UIStoryboard(name: "Home", bundle: nil)
        
        // Get view controllers
        
        serieAMarcatoreVC = storyboard.instantiateViewController(withIdentifier: "MarcatoreViewController") as? BaseViewController
        noDataVC = storyboard.instantiateViewController(withIdentifier: "NoDataViewController") as? BaseViewController
        
        // Save instantiated references in array
        viewControllers = [BaseViewController]()
        
        // Set initial vc
        interactor?.handleControllersSwitch(request: HomeSoccer.Switch.Request(indexSegmented: self.segmentedControl.selectedSegmentIndex, indexHeader: self.headerCollectionSelectedIndex))
    }
    
    func displayControllersSwitch(viewModel: HomeSoccer.Switch.ViewModel) {
        
        // Remove VC if already loaded
        if currentVC != nil {
            let previousVC = currentVC
            previousVC?.willMove(toParent: nil)
            previousVC?.view.removeFromSuperview()
            previousVC?.removeFromParent()
        }
        
        // Select view controller based on indexes
        var vc = BaseViewController()
        if viewModel.indexSegmented == 4 && viewModel.indexHeader == 0 {
            
            // Present marcatore VC
            vc = serieAMarcatoreVC
        } else {
            
            // Present No data VC
            vc = noDataVC
        }
        
        
        // Get and add next view controller
        addChild(vc)
        vc.view.frame = viewContent.bounds
        viewContent.addSubview(vc.view)
        vc.didMove(toParent: self)
        
        // Set current vc
        self.currentVC = vc
        
        // Store in array if not already
        if self.viewControllers.contains(vc) == false {
            self.viewControllers.append(vc)
        }
    }
}

// MARK: - Configuration
// MARK:

extension HomeSoccerViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    // Register collection view cells
    func registerCellsForCollectionView() {
        let nibName = UINib(nibName: "SoccerHeaderCollectionViewCell", bundle:nil)
        self.headerCollectionView.register(nibName, forCellWithReuseIdentifier: "SoccerHeaderCollectionViewCell")
    }

    // Cell size
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        // Set Cell Size
        return CGSize(width: 100.0, height: 44.0)
    }
    
    // Item selected
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        // Handle cell selection - switch tab
        headerCollectionSelectedIndex = indexPath.row
        UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) {
            DispatchQueue.main.async {
                self.headerCollectionView.reloadData()
            }
        } completion: { completed in }

        // Show appropriate view controller
        interactor?.handleControllersSwitch(request: HomeSoccer.Switch.Request(indexSegmented: self.segmentedControl.selectedSegmentIndex, indexHeader: self.headerCollectionSelectedIndex))
    }
    
    // Number of sections in collection view
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    // Number of items in section in collection view
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        // Number of sections
        return headerCollectionArrayDatasource.count
    }
    
    // Cell for item at index path
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        // Get slider image cell
        return SoccerHeaderCollectionViewCell.configureItem(collectionView, itemAtIndexPath: indexPath, params: ["title": headerCollectionArrayDatasource[indexPath.row], "selected": indexPath.row == headerCollectionSelectedIndex], context: self)
    }
    
    // Handle colllection vie scroll
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.showLeftRightButtons()
    }
}

